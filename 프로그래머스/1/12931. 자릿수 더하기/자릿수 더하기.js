function solution(n) {
    let nStr = n.toString().split("").map(Number)
    let sum = 0;

    for (let i = 0; i < nStr.length; i++) {
        sum += nStr[i]
    }

    return sum
}


// 천재분의 쉬운방법
//     return (n+"").split("").reduce((acc, curr) => acc + parseInt(curr), 0)
// }

// solution 함수는 하나의 매개변수 n을 받습니다.
// return (n+"")는 숫자 n을 문자열로 변환하는 방식으로 작성되었습니다. n을 문자열로 바꾼 후, .split("") 메서드를 사용하여 각 자릿수를 문자열 배열로 분할합니다.
// reduce 메서드는 배열 요소를 하나의 값으로 축소하는 데 사용됩니다. reduce 메서드의 첫 번째 매개변수는 콜백 함수입니다. 여기서는 각 숫자를 누적하여 합산하는 함수가 제공됩니다.
// acc는 누적값을 나타냅니다. 초기값은 0으로 설정됩니다.
// curr은 현재 처리 중인 배열 요소(문자열로 표현된 숫자의 각 자릿수)를 나타냅니다.
// parseInt(curr)를 통해 현재 문자열 자릿수를 정수로 변환합니다.
// acc + parseInt(curr)는 각 자릿수를 정수로 변환한 값들을 더하여 누적값을 갱신합니다.
// reduce 메서드의 두 번째 매개변수인 초기값은 0으로 설정되어 있습니다.
// 이 함수의 핵심 아이디어는:

// 주어진 숫자 n을 문자열로 변환하고, 각 자릿수를 문자열 배열로 분할합니다.
// 분할된 각 자릿수를 정수로 변환하여 reduce 함수를 사용하여 누적하여 합산합니다.
// 예를 들어, solution(123)을 호출하면:

// n은 123이 됩니다.
// (n+"")를 통해 "123" 문자열로 변환됩니다.
// 문자열 "123"은 .split("")을 사용하여 ["1", "2", "3"] 배열로 분할됩니다.
// reduce 함수를 사용하여 각 자릿수를 누적하여 합산하면, 1 + 2 + 3 = 6이 됩니다.
// 따라서 solution(123)은 6을 반환합니다.